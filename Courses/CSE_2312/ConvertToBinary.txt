//in C code


extern void uint32ToBinary(char str[], uint32_t x);


int main(void)
{
	uint32_t a, b, c;
	char str[33]; // 32 bits + null
	a = 0x12345678;
	uint32ToBinary(str,a);
	printf("a = 0x%08x = %s(base-2)\n", a,str);
}

//in Assembly
// address of the string is passed in R0, x is passed in R1
uint32ToBinary:
	MOV R2, #0x80000000 // mask with bit 31 set
ubt_loop:
	TST R1, R2 //return 0 if the bit is not set, return non-zero if bit is set
	MOVNE R3, #'1' // the bit is set
	MOVEQ R3, #'0' // the bit is clear
	STRB R3, [R0] // store ascii character in string
	ADD R0, R0, #1 // increment pointer by sizeof(char)
	MOVS R2, R2, LSR #1 // move mask bit to the right
	BNE utb_loop //loop back for remaining 32 bits
	MOV R3, #0 // add null terminator
	STRB R3, [R0]	
	BX LR

