//C program

#include <stdlib>
#include <stdio.h>
#include <stdint.h>

// Pass an array in x[], multiply each element of x by the scale and    return them //in y[] (y[i] = x[i] * scale)
// scaleU32 is type void

extern void scaleU32(uint32_t y[], const uint32_t x[], uint32_t scale, uint32_t count)


// Pass arrays in x[] and y[], return dot product
// sum = sum + (x[i] * y[i])
extern uint32_t dotpU32(uint32_t x[], const uint32_t y[], uint32_t count)

#define COUNT 5
int main(void)
{
	uint32_t x[COUNT] = {1, 2, 3, 4, 5};
	uint32_t z[COUNT] = {2, 3, 4, 5, 6};
	uint32_t y[COUNT];
	uint32_t a = 10;
	uint32_t i, prod;

	for (i = 0; i < COUNT; i++)
	{
		printf("x[%u] = %u", i, x[i]);
	}
	scaleU32(y, x, a, COUNT);
	printf("\n");
	for (i = 0; i < COUNT; i++)
	{
		printf("y[%u] = %u", i, y[i]);
	}

	prod = dotpU32(x, z, COUNT);
	printf("dot product = %u\n", prod);
	return 0;
}

//Assembly Program

.global scaleU32
.global dotpU32
.text

// scaleU32(uint32_t y[], const uint32_t x[], uint32_t scale, uint32_t count)
// address of y[0] is in R0, address of x[0] is in R1, value of scale // is in R2, and count is in R3 (count is the number of element)

scaleU32:
	PUSH {R4, R5}		// push R5, then R4 onto stack (push 				// from higher register to lower 				// register)

scaleU32_loop:
	CMP R3, #0 		// is count = 0?
	BEQ scaleU32_end 	// if (count == 0) then exit
	LDR R4, [R1], #4
	MUL R5, R4, R2 		// R5 = R4 * R2 
	
	STR R5, [R0], #4 	// *R0 = R5, R0 = R0 + sizeof						// (uint32_t)
	
	SUB R3, R3, #1		// decrement the count
	B scaleU32_loop

scaleU32_end:
	POP {R4, R5}		// pop R4, then R5 (pop from lower 					// register to higher register)
	BX LR

// uint32_t dotpU32(uint32_t x[], const uint32_t y[], uint32_t count)
// address of x[0] is stored in R0, address of y[0] is stored in R1, the value of count is stored in R2 -> return product in R0

dotpU32:
	PUSH {R4, R5}
	MOV R3, R0 		// R3 = &x[0]
	MOV R0, #0		// R0 = prod = 0

dotpU32_loop:
	CMP R2, #0		// is count = 0?
	BEQ dotpU32_end
	LDR R4, [R3], #4	// R4 = *R3, R3 = R3 + sizeof						// (uint32_t)
	
	LDR R5, [R1], #4	// R5 = *R1, R1 = R1 + sizeof						// (uint32_t)
	
	MLA R0, R4, R5, R0	// R0 = R4 * R5 + R0 (multiply and 					// accumulate in R0)
	SUB R2, R2, #1 
	B dotpU32_loop

dotpU32_end:
	POP {R4, R5}
	BX LR





















